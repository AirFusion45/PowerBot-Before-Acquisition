
const Discord = require('discord.js');
const client = new Discord.Client();
const fs = require('fs')
const path = require('path')
const config = require("./config.json");
const chalk = require('chalk');
const embed = new Discord.RichEmbed()
require('./util/eventLoader')(client);


//try on the rasbp*berry pie
var reload = (message, cmd) => {
    delete require.cache[require.resolve('./commands/' + cmd)];
    try {
        let cmdFile = require('./commands/' + cmd);
    } catch (error) {
        message.channel.sendMessage(`Problem loading ${cmd}: ${error}`).then(
            response => response.delete(1000).catch(error => console.log(error.stack))
        ).catch(error => console.log(error.stack));
    }
    message.channel.sendMessage(`${cmd} reload was a success!`).then(
        response => response.delete(1000).catch(error => console.log(error.stack))
    ).catch(error => console.log(error.stack));
};
exports.reload = reload;


//TODO: https://youtu.be/Znvxk14Tg6A
//TODO: https://youtu.be/8AiZBdcPKOM?t=29m10s
//TODO: add purge
//TODO: https://youtu.be/zdQplH3fwbU?t=16m1s
//TODO: @ melmsie github, how did he do pls tts


client.on("message", message => {  //message handler starts here!
    if (message.author.bot) return;
    if (!message.content.startsWith(config.prefix)) return;

    let command = message.content.split(" ")[0];
    command = command.slice(config.prefix.length);

    let args = message.content.split(" ").slice(1);

    let args2 = message.content.split(" ").slice(2);

    let cmd = args.join(' ');

    let cmd2 = args2.join(' ');
    var res = cmd.slice(0, 1)
    // client.user.setGame("Beta Testing");

    // //  if (command === "masspurge") { //BUGS BELOW
    // //      let messageCount = parseInt(args2.join(' '));
    // //      message.channel.fetchMessages({limit: messageCount}).then(messages => message.channel.bulkDelete(messages));
    // //  } else //BUGS ABOVE

    // // if (command === "ping") {
    // //     //message.channel.sendMessage(`Pinging...`)
    // //     // message.channel.sendMessage(`Pong!`)
    // //     message.channel.sendMessage(`Pong! :ping_pong: `)
    // //     message.channel.sendMessage("`" + (client.ping).toFixed(0) + "ms" + "`")
    // // }

    // // if (command === "avatar") {
    // //     message.channel.sendMessage("Here is your avatar: \n")
    // //     message.channel.sendMessage(message.author.avatarURL);
    // // }

    // // if (command === "date") {
    // //     message.channel.sendMessage("The date is: \n")
    // //     message.channel.sendMessage(Date());
    // // }

    // // if (command === "pika") {
    // //     message.channel.sendMessage("boo!")
    // // }

    // // if (command === "startup") {
    // //     message.channel.sendMessage("__**Starting...**__")
    // //     message.channel.sendMessage("__**Time Stamp: **__" + Date())
    // //     message.channel.sendMessage("__**Bot Startup Successful!**__")
    // //     message.channel.sendMessage("__**For More Information, Please Visit The Terminal On The Host Computer")
    // // }

    // // if (command === "afk") {
    // //     message.reply(" is now AFK");


    // //     let role = message.guild.roles.find("name", "AFK");

    // //     // Let's pretend you mentioned the user you want to add a role to (!addrole @user Role Name):
    // //     let member = message.guild.member(message.author);
    // //     // mentions.users.first()

    // //     // or the person who made the command: let member = message.member;

    // //     // Add the role!
    // //     member.addRole(role).catch(console.error);

    // //     // Remove a role!


    // // }

    // // else if (command === "afkexit") {
    // //     let role = message.guild.roles.find("name", "AFK");

    // //     // Let's pretend you mentioned the user you want to add a role to (!addrole @user Role Name):
    // //     let member = message.guild.member(message.author);
    // //     message.reply(" is no longer AFK");
    // //     member.removeRole(role).catch(console.error);

    // // }
    // // if (command === "setgame") {
    // //     client.user.setGame(cmd);
    // // }
    // // if (command === "setstatus") {
    // //     client.user.setStatus(cmd)
    // // }
    // // if (command === "dnd") {
    // //     let role = message.guild.roles.find("name", "DND/Do Not Disturb");
    // //     let member = message.guild.member(message.author);
    // //     message.reply(` is in Do Not Disturb mode! Please do not disturb ${member}`);
    // //     member.addRole(role).catch(console.error);
    // // }

    // // if (command === "dndexit") {
    // //     let role = message.guild.roles.find("name", "DND/Do Not Disturb");
    // //     let member = message.guild.member(message.author);
    // //     message.reply(` ${member} has exited Do Not Disturb mode!`);
    // //     member.removeRole(role).catch(console.error);
    // // }

    // // if (command === "addrole") {
    // //     if (message.guild.member(message.author).hasPermission('MANAGE_ROLES_OR_PERMISSIONS')) { //roles.has is false for addroel & removerole
    // //         let member = message.guild.member(message.mentions.users.first());
    // //         let role = message.guild.roles.find("name", cmd2);
    // //         // or the person who made the command: let member = message.member;
    // //         message.channel.send(`Role ${role} has been added to ${member} `)
    // //         // Add the role!
    // //         member.addRole(role).catch(console.error);
    // //     }
    // //     // Remove a role!
    // //     else {
    // //         message.channel.send("You do not have perms");
    // //     }
    // // }

    // // if (command === "removerole") {  //add if member does not have role
    // //     if (message.guild.member(message.author).hasPermission('MANAGE_ROLES_OR_PERMISSIONS')) {
    // //         let member = message.guild.member(message.mentions.users.first());
    // //         let role = message.guild.roles.find("name", cmd2);
    // //         member.removeRole(role).catch(console.error);
    // //         message.channel.send(`Role ${role} has been removed from ${member} `)
    // //     }
    // //     //print args.join
    // //     else {
    // //         message.channel.send('You do not have perms');
    // //     }

    // // }
    // // if (command === "say") {
    // //     message.channel.send(cmd)
    // // }

    // // if (command === "add") {  //TODO add other funcs
    // //     let numArray = args.map(n => parseInt(n));
    // //     let total = numArray.reduce((p, c) => p + c);

    // //     message.channel.sendMessage(total);


    // // }

    // // if (command === "subtract") {  //TODO add other funcs
    // //     let numArray = args.map(n => parseInt(n));
    // //     let total = numArray.reduce((p, c) => p - c);

    // //     message.channel.sendMessage(total);


    // // }
    // // if (command === "multi") {  //TODO add other funcs
    // //     let numArray = args.map(n => parseInt(n));
    // //     let total = numArray.reduce((p, c) => p * c);

    // //     message.channel.sendMessage(total);


    // // }
    // // if (command === "div") {  //TODO add other funcs
    // //     let numArray = args.map(n => parseInt(n));
    // //     let total = numArray.reduce((p, c) => p / c);

    // //     message.channel.sendMessage(total);


    // // }
    // // if (command === "sqrt") {  //TODO add other funcs
    // //     let inpuit = args;
    // //     let answer = Math.sqrt(inpuit)
    // //     message.channel.sendMessage(answer);


    // // }

    // // if (command === "^") {  //TODO add other funcs
    // //     // var test = cmd;
    // //     // var res = test.slice(0, 1)
    // //     var answer = Math.pow(res, args2.join(' '));
    // //     message.channel.sendMessage(answer);
    // // }

    // // if (command === "spyon") {  //bugs below

    // //     if (message.author.id === config.owner) {
    // //         let guild = client.guilds.find("name", cmd);
    // //         // let guild = client.channels.get("81385020756865024");
    // //         console.log(guild);
    // //         try {
    // //             //console.log(maxAge);
    // //             guild.defaultChannel.createInvite({}).then(inv => message.channel.sendMessage(inv.url ? inv.url : "discord.gg/" + inv.code))

    // //         } catch (error) {
    // //             console.log(error)
    // //             message.reply(' they don\'t allow me to generate invites :(')
    // //         }
    // //     } else {
    // //         message.reply(" only AirFusion gets to spy on servers, sorry")
    // //     }
    // // }    //TODO <BUGS> in command spyon // consider @PD // */

    // // if (command === "kick") {  //add Ban
    // //     let reason = args.slice(1).join(' ');
    // //     let user = message.mentions.users.first()
    // //     let member = message.guild.member(user)
    // //     if (!message.guild.member(message.author).hasPermission('KICK_MEMBERS')) return message.reply('You must be a moderator to kick people!').catch(console.error)
    // //     if (message.mentions.users.size < 1) return message.reply('Please mention someone to kick!').catch(console.error)
    // //     if (reason.length < 1) return message.reply('Please supply a reason for the kick!').catch(console.error)
    // //     if (!message.guild.member(client.user).hasPermission('KICK_MEMBERS')) return message.reply('I do not have the correct permissions!').catch(console.error)
    // //     if (message.guild.member(member) && member.kickable) {
    // //         message.channel.send(`**__${member} was kicked from ${message.guild.name}.__**\n\n**Kicked by:** ` + message.author.username + "#" + message.author.discriminator + '\n\n**Reason:** *' + reason + '*' + '\n\n**Date:** *' + Date() + '*');
    // //         client.channels.find("name", "modlog").sendMessage(`**__${member} was kicked from ${message.guild.name}.__**\n\n**Kicked by:** ` + message.author.username + "#" + message.author.discriminator + '\n\n**Reason:** *' + reason + '*' + '\n\n**Date:** *' + Date() + '*\n\n');
    // //         //message.channel.send("\n\n")
    // //         setTimeout(function () {
    // //             message.guild.member(user).kick();
    // //         }, 1000);



    // //     }
    // //     else {
    // //         message.reply("This user doesn't exist in the server!")
    // //     }
    // // }

    




    

        // else {
        //     message.channel.sendMessage("Invalid Input");
        // }

        


    // if (command === "help") {
    //     message.channel.sendEmbed('```test')
    //     message.channel.send('omg```')
    // }

    //     if (command === 'color') {
    //       const embed = new Discord.RichEmbed() 
    //       .setColor("#006b3c")    //#357cee
    //       .setTitle("Color Hex")
    //       .setDescription("Website for Color Codes!\n")
    //       //.setURL("http://bit.ly/colorhexcolor")
    //       .addField("Bit.ly Link:", `Please visit: http://bit.ly/colorhexcolor`)
    //       .addField("Normal Link:", "If the link above does not work, then visit this link: http://www.colorhexa.com/color-names")
    //    // message.channel.sendEmbed(embed)
    //     message.channel.sendEmbed(embed, {
    //         disableEveryone: true
    //     })
    //     }

    // if (command === "anagram") {
    //     var first = args.join(' ');
    //     var second = args2.join(' ');
    //     first = first.replace(second, "")
    //     first = first.replace(" ", "")
    //     var reverse = first.split("").reverse().join("");

    //     if (reverse === second) {
    //         message.channel.sendMessage("Anagram");
    //     } else {
    //         message.channel.sendMessage("Not Anagram");
    //     }

    // }


//     if (command === "ccencode") {
//     var string = args.join(' ') //problem with slice
//     var shift = parseInt(args2.join(' '))
//     var array = string
//     //var array = temparray[0].split()
//     var res = ""
//     if (shift > 25) {
//         shift = shift % 26;
//     }
//     for (var i = 0; i < string.length; i++) {
//         // console.log(array[i])
//         res += encode(array[i], shift)
//         res.replace("undefined", " ");
//         //message.channel.sendMessage("Your answer is " + res)
//         // console.log(array[i])
//     }
//     for (; ;) {
//         if (res.indexOf("undefined") != -1) {
//             res = res.replace("undefined", " ");
//         }
//         else {
//             break;
//         }
//     }
//     message.channel.sendMessage("Your answer is " + res.replace("undefined", " "))
// }

// if (command === "ccdecode") {
//     var string = args.join(' ') //problem with slice
//     var shift = parseInt(args2.join(' '))
//     var array = string
//     //var array = temparray[0].split()
//     var res = ""
//     if (shift > 25) {
//         shift = shift % 26;
//     }
//     for (var i = 0; i < string.length; i++) {
//         // console.log(array[i])
//         res += decode(array[i], shift)
//         res.replace("undefined", " ");
//         //message.channel.sendMessage("Your answer is " + res)
//         // console.log(array[i])
//     }

//     for (; ;) {
//         if (res.indexOf("undefined") != -1) {
//             res = res.replace("undefined", " ");
//         }
//         else {
//             break;
//         }
//     }
//     message.channel.sendMessage("Your answer is " + res.replace("undefined", " "))
// }


if (command === "eval") {
    if (message.author.id === config.owner) {
        try {
            var jvs = args.join(" ");
            var done = eval(jvs);
            if (typeof done !== "string")
                done = require("util").inspect(done);
            message.channel.sendCode("x1", clean(done));
        } catch (e) {
            message.channel.sendMessage(`\`ERROR\` \`\`\`x1\n${clean(e)}\n\`\`\``);
        }
    }
    else {
        message.channel.sendMessage("HEY! Stop trying to get into Fusion's computer!")
    }
}

});  //message HANDLER ENDS HERE

function clean(text) {
    if (typeof (text) === "string")
        return text.replace(/` /g, "`" + String.fromCharCode(8203)).replace(/@/g, "@" + String.fromCharCode(8203));
    else
        return text;

}

/* Bugs below
client.on("presenceUpdate", (oldMember, newMember) => {
      let guild = newMember.guild;
      let playRole = guild.roles.find("name", "Playing Roblox");
      if (!playRole) return;

      if (newMember.user.presence.game && newMember.user.presence.name === "ROBLOX") {
          newMember.addRole(playRole).catch(console.error);
      } else if (!newMember.user.presence.game && newMember.roles.has(playRole.id)) {
          newMember.removeRole(playRole).catch(console.error);
      }
  }); 
  BUGS ABOVE */

// client.on("guildMemberAdd", member => {
//     let guild = member.guild;
//     if (member.user.bot) {
//         guild.defaultChannel.sendMessage(`A Wild Bot Has Appeared On The Server... \n The Bot's Name Is: ${member.user} OHHHHHHH... :/`)
//     }
//     else {
//         guild.defaultChannel.sendMessage(`Welcome ${member.user} to CMS Chat!`)
//     }













//OLD RELOAD BELOW!!!!


// client.on("guildMemberRemove", member => {
//     let guild = member.guild;
//     if (member.user.bot) {
//         guild.defaultChannel.sendMessage(`Goodbye to the Wild Bot ${member.user} :( `);

//     }
//     else {
//         guild.defaultChannel.sendMessage(`Goodbye to user ${member.user} :(`);
//     }
// });



var token = /[\w\d]{24}\.[\w\d]{6}\.[\w\d-_]{27}/g;
client.on("debug", error => {
    console.log(chalk.cyan(error.replace(token, "HIDDEN")));
});
client.on("warn", error => {
    console.log(chalk.yellow(error.replace(token, "HIDDEN")));
});
client.on("error", error => {
    console.log(chalk.red(error.replace(token, "HIDDEN")));
});

//https://youtu.be/qEDhVKFWoVg?t=18m21s


client.login(config.token);