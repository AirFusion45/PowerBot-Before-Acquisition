{"version":3,"file":"rewriteframes.js","sourceRoot":"","sources":["../../../src/integrations/pluggable/rewriteframes.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,mCAAmD;AAEnD,2CAAwD;AAIxD,iCAAiC;AACjC;IAsBE;;OAEG;IACH,uBAAmB,OAA8D;QAA9D,wBAAA,EAAA,YAA8D;QAAjF,iBAOC;QA/BD;;WAEG;QACI,SAAI,GAAW,eAAe,CAAC;QAOtC;;WAEG;QACc,aAAQ,GAAuB,UAAO,KAAiB;;;gBACtE,IAAI,KAAK,CAAC,QAAQ,IAAI,KAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;oBAC9C,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,eAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,eAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;oBACxF,KAAK,CAAC,QAAQ,GAAG,YAAU,IAAM,CAAC;iBACnC;gBACD,sBAAO,KAAK,EAAC;;aACd,CAAC;QAMA,IAAI,OAAO,CAAC,IAAI,EAAE;YAChB,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;SAC1B;QACD,IAAI,OAAO,CAAC,QAAQ,EAAE;YACpB,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;SAClC;IACH,CAAC;IAED;;OAEG;IACI,+BAAO,GAAd;QAAA,iBAIC;QAHC,mBAAa,EAAE,CAAC,cAAc,CAAC,UAAC,KAAY;YAC1C,KAAK,CAAC,iBAAiB,CAAC,UAAM,KAAK;gBAAI,sBAAA,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,EAAA;qBAAA,CAAC,CAAC;QAC9D,CAAC,CAAC,CAAC;IACL,CAAC;IAED,YAAY;IACC,+BAAO,GAApB,UAAqB,KAAkB;;;;;;wBAC/B,MAAM,GAAG,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;6BAC1C,MAAM,EAAN,wBAAM;;mCACQ,MAAM;;;;;;;wBACpB,2BAA2B;wBAC3B,KAAA,MAAM,CAAA;wBAAC,KAAA,CAAC,CAAA;wBAAI,qBAAM,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAA;;wBAD1C,2BAA2B;wBAC3B,MAAS,GAAG,SAA8B,CAAC;;;;;4BAG/C,sBAAO,KAAK,EAAC;;;;KACd;IAED,YAAY;IACJ,0CAAkB,GAA1B,UAA2B,KAAkB;QAC3C,IAAM,SAAS,GAAG,KAAK,CAAC,SAAS,CAAC;QAElC,IAAI,SAAS,EAAE;YACb,IAAI;gBACF,yCAAyC;gBACzC,OAAQ,SAAiB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC;aACvD;YAAC,OAAO,GAAG,EAAE;gBACZ,OAAO,SAAS,CAAC;aAClB;SACF;aAAM,IAAI,KAAK,CAAC,UAAU,EAAE;YAC3B,OAAO,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC;SAChC;aAAM;YACL,OAAO,SAAS,CAAC;SAClB;IACH,CAAC;IACH,oBAAC;AAAD,CAAC,AAxED,IAwEC;AAxEY,sCAAa","sourcesContent":["import { getCurrentHub, Scope } from '@sentry/hub';\nimport { Integration, SentryEvent, StackFrame } from '@sentry/types';\nimport { basename, relative } from '@sentry/utils/path';\n\ntype StackFrameIteratee = (frame: StackFrame) => Promise<StackFrame>;\n\n/** Rewrite event frames paths */\nexport class RewriteFrames implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public name: string = 'RewriteFrames';\n\n  /**\n   * @inheritDoc\n   */\n  private readonly root?: string;\n\n  /**\n   * @inheritDoc\n   */\n  private readonly iteratee: StackFrameIteratee = async (frame: StackFrame) => {\n    if (frame.filename && frame.filename.startsWith('/')) {\n      const base = this.root ? relative(this.root, frame.filename) : basename(frame.filename);\n      frame.filename = `app:///${base}`;\n    }\n    return frame;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options: { root?: string; iteratee?: StackFrameIteratee } = {}) {\n    if (options.root) {\n      this.root = options.root;\n    }\n    if (options.iteratee) {\n      this.iteratee = options.iteratee;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public install(): void {\n    getCurrentHub().configureScope((scope: Scope) => {\n      scope.addEventProcessor(async event => this.process(event));\n    });\n  }\n\n  /** JSDoc */\n  public async process(event: SentryEvent): Promise<SentryEvent> {\n    const frames = this.getFramesFromEvent(event);\n    if (frames) {\n      for (const i in frames) {\n        // tslint:disable-next-line\n        frames[i] = await this.iteratee(frames[i]);\n      }\n    }\n    return event;\n  }\n\n  /** JSDoc */\n  private getFramesFromEvent(event: SentryEvent): StackFrame[] | undefined {\n    const exception = event.exception;\n\n    if (exception) {\n      try {\n        // tslint:disable-next-line:no-unsafe-any\n        return (exception as any).values[0].stacktrace.frames;\n      } catch (_oO) {\n        return undefined;\n      }\n    } else if (event.stacktrace) {\n      return event.stacktrace.frames;\n    } else {\n      return undefined;\n    }\n  }\n}\n"]}